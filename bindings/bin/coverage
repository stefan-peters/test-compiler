#!/usr/bin/env python

import sys
import coverage
import argparse
import hashlib

def annotate(args):

    content = open(args.input, "r").read()
    annotations = coverage.annotate(content)

    sha1 = hashlib.sha1()
    sha1.update(content)
    content = content.split("\n")

    counter = 0

    for a in reversed(annotations):
        line = content[a.marker.start.line]
        pre = line[:a.marker.start.column]
        branch = line[a.marker.start.column:a.marker.end.column]
        post = line[a.marker.end.column:]

        true_node = counter
        counter += 1
        false_node = counter
        counter += 1

        a_branch = "({0}) ? (++_cov[{1}], true) : (++_cov[{2}], false)".format(branch, true_node, false_node)

        content[a.marker.start.line] = "".join([pre, a_branch, post])

    content.insert(0, "static char _cov_is_registered = _cov_register(_cov_id, _cov, {0});".format(counter + 1))
    content.insert(0, "static const char* _cov_id = \"{0}\";".format(sha1.hexdigest()[:8]))
    content.insert(0, "static int _cov[{0}] = {{0}};".format(counter + 1))
    content.insert(0, "extern char _cov_register(const char* id, int* data, unsigned int size);")


    if args.output:
        with open(args.output, "w+") as f:
            f.write("\n".join(content))
    else:
        sys.stdout.write("\n".join(content))


def execute(argv):
    parser = argparse.ArgumentParser(description='Instruments c/c++ code for code coverage measurement')
    #parser.add_argument(VERBOSE)
    subparsers = parser.add_subparsers(help='available sub commands')
    annotate_parser = subparsers.add_parser('annotate', help='annotate source')
    annotate_parser.add_argument("--output", "-o", help="destintation")
    annotate_parser.add_argument("input", help="source file")
    annotate_parser.set_defaults(func=annotate)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
  sys.exit(execute(sys.argv[1:]))
